import streamlit as st
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from datetime import date, datetime


st.set_page_config(
    page_title='analysis_time_series',
    page_icon='üìä'
)
st.sidebar.success("–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª")

@st.cache_data() # suppress_st_warning=True
def grath(ts_df, metric: str):
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    
    dates = ts_df['time'].head(1000)
    values = ts_df[metric].head(1000)

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏
    q25 = np.percentile(values, 25)
    median = np.percentile(values, 50)
    q75 = np.percentile(values, 75)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6), gridspec_kw={'width_ratios': [3, 1]})

    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    ax1.plot(dates, values, label='–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥')
    ax1.axhline(median, color='black', linestyle='-', label='–ú–µ–¥–∏–∞–Ω–∞')
    ax1.axhline(q25, color='green', linestyle='-', label='0.25 –∫–≤–∞–Ω—Ç–∏–ª—å')
    ax1.axhline(q75, color='orange', linestyle='-', label='0.75 –∫–≤–∞–Ω—Ç–∏–ª—å')
    ax1.legend()
    ax1.set_title('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å –ª–∏–Ω–∏—è–º–∏ –∫–≤–∞–Ω—Ç–∏–ª–µ–π')
    ax1.set_xlabel('–î–∞—Ç–∞')
    ax1.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è)
    ax2.hist(values, bins=10, orientation='horizontal', color='blue', alpha=0.7)
    ax2.axhline(median, color='black', linestyle='-', label='–ú–µ–¥–∏–∞–Ω–∞')
    ax2.axhline(q25, color='green', linestyle='-', label='1 –∫–≤–∞—Ä—Ç–∏–ª—å')
    ax2.axhline(q75, color='orange', linestyle='-', label='3 –∫–≤–∞—Ä—Ç–∏–ª—å')
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞')
    ax2.set_xlabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax2.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax2.legend()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–µ–¥–µ–ª—ã –æ—Å–∏ y –¥–ª—è –æ–±–æ–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    ax1.set_ylim(min(values), max(values))
    ax2.set_ylim(min(values), max(values))

    plt.tight_layout()
    plt.style.use('https://github.com/dhaitz/matplotlib-stylesheets/raw/master/pitayasmoothie-light.mplstyle')
    plt.show()
    st.write(fig)

def init_state(state:str, default):
    if state not in st.session_state:
        st.session_state[state] = default

def save(end_date,is_recreate, grath1_vis,grath2_vis,grath3_vis,grath4_vis,slider_val):
    st.session_state["grath1_vis"] = grath1_vis
    st.session_state["grath2_vis"] = grath2_vis
    st.session_state["grath3_vis"] = grath3_vis
    st.session_state["grath4_vis"] = grath4_vis
    #st.session_state["start_date"] = start_date
    st.session_state["end_date"] = end_date
    st.session_state["is_recreate"] = is_recreate
    st.session_state["slider_val"] = (st.session_state["start_date"], end_date)
    
# —Ç–∏–ø–æ —É –º–µ–Ω—è –µ—Å—Ç—å —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Ç–∫—É–¥–∞-–Ω–∏–±—É–¥—å
START_DATE = datetime(year=2024, month=1, day=1,hour=5, minute=10)
END_DATE = datetime(year=2024, month=1, day=31,hour=11, minute=30)

init_state("start_date", START_DATE)
init_state("end_date", END_DATE)
init_state("is_recreate", False)
init_state("grath1_vis", True)
init_state("grath2_vis", True)
init_state("grath3_vis", True)
init_state("grath4_vis", True)
init_state("slider_val", (START_DATE.date(),END_DATE.date()))


st.markdown("""<h1 style = 'text-align: center'> –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</h1>""", unsafe_allow_html=True)
data = pd.read_csv('data.csv')

if st.session_state["grath1_vis"]:
    grath(data, "throughput")
if st.session_state["grath2_vis"]:
    grath(data, "apdex")
if st.session_state["grath3_vis"]:     
    grath(data, "throughput")
if st.session_state["grath4_vis"]:   
    grath(data, "apdex")

slider_val = st.slider("TEST",START_DATE.date(), END_DATE.date(), value=st.session_state["slider_val"])

st.write("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
col1, col2 = st.columns(2)
col1.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞", min_value=START_DATE, max_value=END_DATE,key="start_date") #key="start_date"
end_date = col2.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞", min_value=st.session_state.start_date, max_value=END_DATE) #, key="end_date"
is_recreate = col2.checkbox("–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ?") #, key="is_recreate"
st.write("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
col1, col2 = st.columns(2)
grath1_vis = col1.checkbox("–ú–µ—Ç—Ä–∏–∫–∞ 1", value=st.session_state["grath1_vis"]) # , key="grath1_vis"
grath2_vis = col1.checkbox("–ú–µ—Ç—Ä–∏–∫–∞ 2", value=st.session_state["grath2_vis"]) # , key="grath2_vis"
grath3_vis = col2.checkbox("–ú–µ—Ç—Ä–∏–∫–∞ 3", value=st.session_state["grath3_vis"]) # , key="grath3_vis"
grath4_vis = col2.checkbox("–ú–µ—Ç—Ä–∏–∫–∞ 4", value=st.session_state["grath4_vis"]) # , key="grath4_vis"

st.button("–ü—Ä–∏–Ω—è—Ç—å", on_click=save, args=(end_date,is_recreate, grath1_vis,grath2_vis,grath3_vis,grath4_vis,slider_val,))







data_file = st.file_uploader(label='–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏!',accept_multiple_files=False,type="tsv")
if data_file is not None:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ TSV
        data = pd.read_tsv(data_file)
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç .tsv")
    
